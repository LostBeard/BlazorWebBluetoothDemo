@page "/"
@using SpawnDev.BlazorJS
@using SpawnDev.BlazorJS.JSObjects
@implements IAsyncDisposable

<PageTitle>ESP32 Web BLE Application</PageTitle>

<h1>ESP32 Web BLE Application</h1>
<button disabled="@(!isWebBluetoothEnabled || device != null)" @onclick=ConnectClick>Connect to BLE Device</button>
<button disabled="@(device == null)" @onclick=DisconnectClick>Disconnect BLE Device</button>
<p>BLE state: <strong><span style="color:#d13a30;">@bleState</span></strong></p>
<h2>Current Fake Sensor Value</h2>
<p><span>@retrievedValue</span></p>
<p>Last reading: <span>@timestamp</span></p>
<h2>Onboard LED</h2>
<button disabled="@(!connected)" @onclick=OnClick>ON</button>
<button disabled="@(!connected)" @onclick=OffClick>OFF</button>
<p>Last value sent: <span>@valueSent</span></p>

@code
{
    [Inject]
    BlazorJSRuntime JS { get; set; } = default!;

    bool isWebBluetoothEnabled = false;
    string retrievedValue = "NaN";
    string valueSent = "";
    string timestamp = "";
    string bleState = "Disconnected";

    //Define BLE Device Specs
    string deviceName = "ESP32";
    string bleService = "19b10000-e8f2-537e-4f6c-d104768a1214";
    string ledCharacteristic = "19b10002-e8f2-537e-4f6c-d104768a1214";
    string sensorCharacteristic = "19b10001-e8f2-537e-4f6c-d104768a1214";

    //Global Variables to Handle Bluetooth
    BluetoothDevice? device;
    BluetoothRemoteGATTServer? bleServer;
    BluetoothRemoteGATTService? bleServiceFound;
    BluetoothRemoteGATTCharacteristic? sensorCharacteristicFound;
    bool connected = false;
    TextDecoder? textDecoder = null;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            textDecoder = new TextDecoder();
            using var navigator = JS.Get<Navigator>("navigator");
            using var bluetooth = navigator.Bluetooth;
            isWebBluetoothEnabled = bluetooth != null;
            if (!isWebBluetoothEnabled)
            {
                bleState = "Web Bluetooth not supported";
            }
            else
            {
                bleState = "Web Bluetooth supported";
            }
            StateHasChanged();
        }
    }
    async Task OnClick()
    {
        await WriteOnCharacteristic(1);
    }
    async Task OffClick()
    {
        await WriteOnCharacteristic(0);
    }
    async Task ConnectClick()
    {
        if (connected)
        {
            await DisconnectClick();
        }
        try
        {
            using var navigator = JS.Get<Navigator>("navigator");
            using var bluetooth = navigator.Bluetooth;
            device = await bluetooth!.RequestDevice(new BluetoothDeviceOptions
                {
                    AcceptAllDevices = true,
                    OptionalServices = new string[] { bleService }
                });
            device.OnGATTServerDisconnected += Device_OnGATTServerDisconnected;
            bleState = $"Connected to device {device.Name}";
            bleServer = await device.GATT!.Connect();
            bleServiceFound = await bleServer.GetPrimaryService(bleService);
            sensorCharacteristicFound = await bleServiceFound.GetCharacteristic(sensorCharacteristic);
            sensorCharacteristicFound.OnCharacteristicValueChanged += SensorCharacteristicFound_OnCharacteristicValueChanged;
            await sensorCharacteristicFound.StartNotifications();
            connected = true;
            using var test = await sensorCharacteristicFound.JSRef!.CallAsync<JSObject>("readValue");
            using var value = await sensorCharacteristicFound.ReadValue();
            // TODO - check if TextDecoder.Decode() can accept a DataView, and byte arrays (and therefore Uint8Array)
            retrievedValue = textDecoder!.Decode(value.Buffer);
            timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
        }
        catch (Exception ex)
        {
            bleState = "Connect failed:" + ex.Message;
        }
    }
    void SensorCharacteristicFound_OnCharacteristicValueChanged(Event e)
    {
        using var characteristic = e.TargetAs<BluetoothRemoteGATTCharacteristic>();
        using var value = characteristic.Value;
        retrievedValue = textDecoder!.Decode(value.Buffer);
        timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
        StateHasChanged();
    }
    async void Device_OnGATTServerDisconnected(Event e)
    {
        if (connected)
        {
            await DisconnectClick();
        }
        StateHasChanged();
    }
    async Task DisconnectClick()
    {
        if (!connected) return;
        connected = false;
        bleState = "Disconnected";
        if (sensorCharacteristicFound != null)
        {
            sensorCharacteristicFound.OnCharacteristicValueChanged -= SensorCharacteristicFound_OnCharacteristicValueChanged;
            if (bleServer?.Connected == true)
            {
                await sensorCharacteristicFound.StopNotifications();
            }
            sensorCharacteristicFound.Dispose();
            sensorCharacteristicFound = null;
        }
        if (bleServiceFound != null)
        {
            bleServiceFound.Dispose();
            bleServiceFound = null;
        }
        if (bleServer != null)
        {
            if (bleServer.Connected)
            {
                // this will cause Device_OnGATTServerDisconnected to fire.
                bleServer.Disconnect();
            }
            bleServer.Dispose();
            bleServer = null;
        }
        if (device != null)
        {
            device.OnGATTServerDisconnected -= Device_OnGATTServerDisconnected;
            device.Dispose();
            device = null;
        }
    }
    async Task WriteOnCharacteristic(byte value)
    {
        if (bleServer != null && bleServer.Connected && bleServiceFound != null)
        {
            var characteristic = await bleServiceFound.GetCharacteristic(ledCharacteristic);
            var data = new byte[] { value };
            await characteristic.WriteValueWithoutResponse(data);
            valueSent = value == 1 ? "ON" : "OFF";
            StateHasChanged();
        }
    }
    public async ValueTask DisposeAsync()
    {
        await DisconnectClick();
        textDecoder?.Dispose();
    }
}